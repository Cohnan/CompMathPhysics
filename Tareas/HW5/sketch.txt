+ Class to represent the systems of masses

++ Receive masses (np.array), velocities (np.array); maybe the method (function) to solve the ODE's (default Rugecuta 4th maybe); default time step, allowed porcentual or maybe relative error between init position and a position to decide periodicity; max time to compute;  derivative function of pos_vel vector.

++ I want to store:

+++ positions, velocities (in a nd.array Y = [m1, .., mn, v1, ..., vn]) of a complete orbit and it's period if periodicity present.
+++ maybe masses with a format in a dictionary would be useful for the acceleration function below.
+++ Also the times corresponding to each step, maybe an nd.array for just the times, and a dictionary to acces the Y's with keys the times. 
+++ Maybe accelerations would be appropiate too if I were to use multistep methods implemented by myself (maybe not such a good idea given that the scipy implementations are possibly better). 
+++ Maybe an current state decided by a step time with some default (I think the total system should be calculated at the initialization of the object to have the information of periodicity and orbital period).
+++ A max time (because of the periodicity thing)
+++ A boolean to store whether it is periodic or not.

++ Functions to:

+++ Calculate all the system up to the max time and store it. Start from the last calculated state.
+++ Take a time and reduce it modulo the period (if periodic) and convert it to the greatest step time smaller than the given time. I plan to use it to change the current state.
+++ Calculate acceleration for a given mass at a given time; function to calculate energies (cinetic, mechanical and total)
+++ possibly private function to advance the system a time given a time step (or if with the default one); 
+++ I think a function that sets up the animation initialization function and the rest of the stuff would be appropiate, this would possibly recieve the animation time (or calculate one), fps. I think I'll leave the saving to the calling place.
+++ Change the max calculation time (if smaller than the calculated one, then do nothing) and use the updater.

+ Function for Runge-Kuta 4 that receives a state vector Y, a derivative function (of Y and t), and a time step.

+ 1st point. 

+ For the 2nd point, function to calculate the appropiate a; receiving initial and final values for a range where to look for, relative allowed error; using bisection.


Changes:

+ masses not a dictionary but array
+ Ys dictionary with keys the times
+ keep time_step, porcentual error final positions, 
+ functions to change time step, relative error, state, return state
+ actual time in initilization
+ store N for number of masses
+ Function to change both the timestep and the max time, to avoid unnecesasry calculations in case I want to recalculate the system
+ array for times (avoidable with sort, but probably more expesive)
+ calcular_Ys asks for restart, otherwise will begin since t_max
+ store too an array with the derivatives of each Y, in a dictionary too, in case I use multistep methods
+ 
